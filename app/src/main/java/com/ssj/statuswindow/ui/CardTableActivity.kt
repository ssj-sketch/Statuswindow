package com.ssj.statuswindow.ui

import android.os.Bundle
import android.view.MenuItem
import android.widget.Button
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity
import androidx.appcompat.widget.Toolbar
import androidx.drawerlayout.widget.DrawerLayout
import androidx.lifecycle.lifecycleScope
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.google.android.material.navigation.NavigationView
import com.ssj.statuswindow.R
import com.ssj.statuswindow.database.StatusWindowDatabase
import com.ssj.statuswindow.database.entity.CreditCardUsageEntity
import com.ssj.statuswindow.ui.adapter.CardTableAdapter
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.text.NumberFormat
import java.util.*

/**
 * Ïπ¥ÎìúÌÖåÏù¥Î∏î ÌôîÎ©¥
 */
class CardTableActivity : AppCompatActivity() {
    
    private lateinit var drawerLayout: DrawerLayout
    private lateinit var toolbar: Toolbar
    private lateinit var navigationView: NavigationView
    private lateinit var recyclerView: RecyclerView
    private lateinit var tvSummary: TextView
    private lateinit var btnDeleteAll: Button
    
    private lateinit var database: StatusWindowDatabase
    private lateinit var adapter: CardTableAdapter
    private val cardUsages = mutableListOf<CreditCardUsageEntity>()
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_card_table)
        
        // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï¥àÍ∏∞Ìôî
        database = StatusWindowDatabase.getDatabase(this)
        
        setupViews()
        setupToolbar()
        setupNavigation()
        setupRecyclerView()
        setupClickListeners()
        loadCardTable()
    }
    
    private fun setupViews() {
        drawerLayout = findViewById(R.id.drawerLayout)
        toolbar = findViewById(R.id.toolbar)
        navigationView = findViewById(R.id.navigationView)
        recyclerView = findViewById(R.id.recyclerView)
        tvSummary = findViewById(R.id.tvSummary)
        btnDeleteAll = findViewById(R.id.btnDeleteAll)
    }
    
    private fun setupToolbar() {
        setSupportActionBar(toolbar)
        supportActionBar?.setDisplayHomeAsUpEnabled(true)
        supportActionBar?.setHomeAsUpIndicator(R.drawable.ic_menu_white_24dp)
        supportActionBar?.title = "Ïπ¥ÎìúÌÖåÏù¥Î∏î"
    }
    
    private fun setupNavigation() {
        navigationView.setNavigationItemSelectedListener { menuItem ->
            when (menuItem.itemId) {
                R.id.nav_dashboard -> {
                    finish() // Î©îÏù∏ÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞
                    true
                }
                R.id.nav_card_details -> {
                    // Ïπ¥Îìú ÏÇ¨Ïö©ÎÇ¥Ïó≠ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
                    startActivity(android.content.Intent(this, CardDetailsActivity::class.java))
                    drawerLayout.closeDrawers()
                    true
                }
                R.id.nav_bank_transaction -> {
                    // ÏûÖÏ∂úÍ∏àÎÇ¥Ïó≠ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
                    startActivity(android.content.Intent(this, BankTransactionActivity::class.java))
                    drawerLayout.closeDrawers()
                    true
                }
                R.id.nav_card_table -> {
                    // ÌòÑÏû¨ ÌéòÏù¥ÏßÄ
                    drawerLayout.closeDrawers()
                    true
                }
                R.id.nav_category_analysis -> {
                    // Ïπ¥ÌÖåÍ≥†Î¶¨ Î∂ÑÏÑù ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
                    drawerLayout.closeDrawers()
                    true
                }
                R.id.nav_monthly_report -> {
                    // ÏõîÎ≥Ñ Î¶¨Ìè¨Ìä∏ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
                    drawerLayout.closeDrawers()
                    true
                }
                R.id.nav_settings -> {
                    // ÏÑ§Ï†ï ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
                    drawerLayout.closeDrawers()
                    true
                }
                R.id.nav_about -> {
                    // Ïï± Ï†ïÎ≥¥ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
                    drawerLayout.closeDrawers()
                    true
                }
                else -> false
            }
        }
    }
    
    private fun setupRecyclerView() {
        adapter = CardTableAdapter(cardUsages) { cardUsage ->
            showDeleteConfirmationDialog(cardUsage)
        }
        recyclerView.layoutManager = LinearLayoutManager(this)
        recyclerView.adapter = adapter
    }
    
    private fun setupClickListeners() {
        btnDeleteAll.setOnClickListener {
            showDeleteAllConfirmationDialog()
        }
    }
    
    private fun showDeleteAllConfirmationDialog() {
        androidx.appcompat.app.AlertDialog.Builder(this)
            .setTitle("Ï†ÑÏ≤¥ ÏÇ≠Ï†ú ÌôïÏù∏")
            .setMessage("Î™®Îì† Ïπ¥ÎìúÌÖåÏù¥Î∏î Îç∞Ïù¥ÌÑ∞Î•º ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?\n\nÏù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏäµÎãàÎã§.")
            .setPositiveButton("ÏÇ≠Ï†ú") { _, _ ->
                deleteAllCardTable()
            }
            .setNegativeButton("Ï∑®ÏÜå", null)
            .show()
    }
    
    private fun showDeleteConfirmationDialog(cardUsage: CreditCardUsageEntity) {
        androidx.appcompat.app.AlertDialog.Builder(this)
            .setTitle("Ïπ¥ÎìúÌÖåÏù¥Î∏î ÏÇ≠Ï†ú ÌôïÏù∏")
            .setMessage("Ïù¥ Ïπ¥ÎìúÌÖåÏù¥Î∏î Ìï≠Î™©ÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?\n\n${cardUsage.merchant} - ${NumberFormat.getNumberInstance(Locale.KOREA).format(cardUsage.amount)}Ïõê")
            .setPositiveButton("ÏÇ≠Ï†ú") { _, _ ->
                deleteCardTableItem(cardUsage)
            }
            .setNegativeButton("Ï∑®ÏÜå", null)
            .show()
    }
    
    private fun deleteAllCardTable() {
        lifecycleScope.launch(Dispatchers.IO) {
            try {
                val creditCardUsageDao = database.creditCardUsageDao()
                creditCardUsageDao.deleteAllCreditCardUsage()
                
                withContext(Dispatchers.Main) {
                    // UI ÏóÖÎç∞Ïù¥Ìä∏
                    cardUsages.clear()
                    adapter.notifyDataSetChanged()
                    tvSummary.text = "üìä Ïπ¥ÎìúÌÖåÏù¥Î∏î ÏöîÏïΩ\n\nÏ¥ù Ïπ¥ÎìúÏÇ¨Ïö©: 0Í±¥\nÏ¥ù ÏÇ¨Ïö©Í∏àÏï°: 0Ïõê\nÏ¥ù Ï≤≠Íµ¨Í∏àÏï°: 0Ïõê"
                    
                    android.widget.Toast.makeText(this@CardTableActivity, "Î™®Îì† Ïπ¥ÎìúÌÖåÏù¥Î∏î Îç∞Ïù¥ÌÑ∞Í∞Ä ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.", android.widget.Toast.LENGTH_SHORT).show()
                }
                
            } catch (e: Exception) {
                e.printStackTrace()
                withContext(Dispatchers.Main) {
                    android.widget.Toast.makeText(this@CardTableActivity, "ÏÇ≠Ï†ú Ïò§Î•ò: ${e.message}", android.widget.Toast.LENGTH_SHORT).show()
                }
            }
        }
    }
    
    private fun deleteCardTableItem(cardUsage: CreditCardUsageEntity) {
        lifecycleScope.launch(Dispatchers.IO) {
            try {
                val creditCardUsageDao = database.creditCardUsageDao()
                creditCardUsageDao.deleteCreditCardUsage(cardUsage)
                
                withContext(Dispatchers.Main) {
                    // UI ÏóÖÎç∞Ïù¥Ìä∏
                    cardUsages.remove(cardUsage)
                    adapter.notifyDataSetChanged()
                    updateSummary(cardUsages)
                    
                    android.widget.Toast.makeText(this@CardTableActivity, "Ïπ¥ÎìúÌÖåÏù¥Î∏î Ìï≠Î™©Ïù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.", android.widget.Toast.LENGTH_SHORT).show()
                }
                
            } catch (e: Exception) {
                e.printStackTrace()
                withContext(Dispatchers.Main) {
                    android.widget.Toast.makeText(this@CardTableActivity, "ÏÇ≠Ï†ú Ïò§Î•ò: ${e.message}", android.widget.Toast.LENGTH_SHORT).show()
                }
            }
        }
    }
    
    private fun loadCardTable() {
        lifecycleScope.launch(Dispatchers.IO) {
            try {
                val creditCardUsageDao = database.creditCardUsageDao()
                val allCreditCardUsage = creditCardUsageDao.getAllCreditCardUsage()
                
                allCreditCardUsage.collect { cardUsageList ->
                    withContext(Dispatchers.Main) {
                        cardUsages.clear()
                        cardUsages.addAll(cardUsageList)
                        adapter.notifyDataSetChanged()
                        updateSummary(cardUsageList)
                    }
                }
                
            } catch (e: Exception) {
                e.printStackTrace()
                withContext(Dispatchers.Main) {
                    tvSummary.text = "‚ùå Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïò§Î•ò: ${e.message}"
                }
            }
        }
    }
    
    private fun updateSummary(cardUsageList: List<CreditCardUsageEntity>) {
        val formatter = NumberFormat.getNumberInstance(Locale.KOREA)
        
        val totalCount = cardUsageList.size
        val totalAmount = cardUsageList.sumOf { it.amount }
        val totalBillAmount = cardUsageList.sumOf { it.billingAmount }
        
        val categoryStats = cardUsageList.groupBy { it.merchantCategory }
        
        val summary = StringBuilder()
        summary.append("üìä Ïπ¥ÎìúÌÖåÏù¥Î∏î ÏöîÏïΩ\n\n")
        summary.append("Ï¥ù Ïπ¥ÎìúÏÇ¨Ïö©: ${totalCount}Í±¥\n")
        summary.append("Ï¥ù ÏÇ¨Ïö©Í∏àÏï°: ${formatter.format(totalAmount)}Ïõê\n")
        summary.append("Ï¥ù Ï≤≠Íµ¨Í∏àÏï°: ${formatter.format(totalBillAmount)}Ïõê\n\n")
        
        summary.append("‚úì Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ ÏÇ¨Ïö©ÎÇ¥Ïó≠\n")
        summary.append("-".repeat(30)).append("\n")
        
        categoryStats.forEach { (category, usages) ->
            val categoryAmount = usages.sumOf { it.amount }
            summary.append("${category ?: "Í∏∞ÌÉÄ"}: ${usages.size}Í±¥, ${formatter.format(categoryAmount)}Ïõê\n")
        }
        
        tvSummary.text = summary.toString()
    }
    
    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        return when (item.itemId) {
            android.R.id.home -> {
                drawerLayout.openDrawer(navigationView)
                true
            }
            else -> super.onOptionsItemSelected(item)
        }
    }
}
